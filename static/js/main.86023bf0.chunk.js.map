{"version":3,"sources":["components/spotifyWidget/spotifyWidget.js","components/youtubeWidget/youtubeWidget.js","App.js","serviceWorker.js","index.js"],"names":["SpotifyWidget","width","height","uri","viewCoverArt","React","Component","API_KEY","YoutubeWidget","state","item","videos","videoDetails","statistics","getStats","forEach","video","axios","get","id","videoId","then","res","data","url","description","snippet","title","views","items","viewCount","likes","likeCount","dislikes","dislikeCount","push","setState","catch","err","console","log","this","props","channelName","response","className","style","backgroundColor","border","position","zIndex","borderBottom","data-channel","data-layout","data-theme","data-count","length","color","channelTitle","marginBottom","display","gridTemplateColumns","gridGap","margin","map","vid","key","src","frameBorder","allow","allowFullScreen","textAlign","fontSize","App","rel","textDecoration","target","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.86023bf0.chunk.js","sourcesContent":["import React from 'react';\r\nimport PlayWidget from 'react-spotify-widgets';\r\n\r\nclass SpotifyWidget extends React.Component {\t\r\n\t\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<PlayWidget\r\n          \twidth={300}\r\n          \theight={420}\r\n          \turi='spotify:album:6fyR4wBPwLHKcRtxgd4sGh'\r\n          \tviewCoverArt={true}\r\n       \t\t/>\r\n\t\t);\r\n  \t}\r\n}\r\n\r\nexport default SpotifyWidget;\r\n","import React,{Component} from 'react';\r\nimport axios from 'axios';\r\n// const API_KEY = \"AIzaSyC7FrhYaNnhkGpv9yL0Aeo96lKjn4G-dHg\";\r\nconst API_KEY =\"AIzaSyDz9rcOeUXPEdy9DyCpC5hrBNGQOugC3oQ\";\r\n\r\nclass YoutubeWidget  extends Component{\r\n\r\n    state={\r\n        item:{},\r\n        videos:[],\r\n        videoDetails:[],\r\n        statistics:[]\r\n    }\r\n    componentDidMount(){\r\n            axios.get(`https://www.googleapis.com/youtube/v3/channels?part=snippet%2CcontentDetails%2Cstatistics&forUsername=${this.props.channelName}&key=${API_KEY}`)\r\n            .then(res=>{\r\n                this.setState({\r\n                    item:res.data.items[0]\r\n                });\r\n                axios.get(`https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${this.state.item.id}&maxResults=50&key=${API_KEY}`)\r\n                .then(response=>{\r\n                    this.setState({\r\n                        videos:response.data.items\r\n                    });\r\n                    this.getStats();\r\n                })\r\n                .catch(err=>{\r\n                    console.log(err);\r\n                })\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    getStats=()=>{\r\n        this.state.videos && this.state.videos.forEach((video)=>{\r\n            axios.get(`https://www.googleapis.com/youtube/v3/videos?part=statistics&id=${video.id.videoId}&maxResults=1&key=${API_KEY}`)\r\n            .then(res=>{\r\n                var data={\r\n                    url:`https://www.youtube.com/embed/${video.id.videoId}`,\r\n                    description:video.snippet.description,\r\n                    title:video.snippet.title,\r\n                    id:video.id.videoId,\r\n                    views:res.data.items[0].statistics.viewCount,\r\n                    likes:res.data.items[0].statistics.likeCount,\r\n                    dislikes:res.data.items[0].statistics.dislikeCount\r\n                }\r\n                this.state.statistics.push(data);\r\n                this.setState({\r\n                    videoDetails:this.state.statistics\r\n                })\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"overflow-auto mx-auto\" style={{height:\"660px\",width:\"95%\",backgroundColor:\"#1f2833\",border:\"2px #ff0000 solid\"}} >\t\t  \r\n\r\n                <div className=\"d-flex mx-0 px-2 pt-2 mb-1\" style={{width:\"76%\",position:\"fixed\",zIndex:\"6\",backgroundColor:\"#6f2232\",borderBottom:\"3px #e62117 solid\"}}>\r\n                    <div className=\"g-ytsubscribe mx-2 col-sm-4 \" width=\"100%\"  data-channel={this.props.channelName} data-layout=\"full\" data-theme=\"dark\" data-count=\"default\" >\r\n                    </div>\r\n                    <div className=\"media-body\">\r\n                        {this.state.videos.length>0?(\r\n                            <h2 className=\"mt-0 m-3 \" style={{color:\"#fff\"}}> {this.state.videos[0].snippet.channelTitle} </h2>\r\n                        ):(\r\n                            <div style={{height:\"82px\"}}></div>\r\n                        )}\r\n                    </div>\r\n                </div> \r\n\r\n                <div style={{marginBottom:\"90px\"}}></div>\r\n                    <div style={{display: \"grid\",gridTemplateColumns: \"auto auto auto\",gridGap: \"15px\",margin:\"15px\"}}>\r\n                        {\r\n                        this.state.videoDetails?(\r\n                            this.state.videoDetails.map((vid,key)=>(\r\n                                <div className=\"card\" key={key} style={{backgroundColor:\"#121111\",color:\"#fff\"}}>\r\n                                    <iframe title={key} width=\"100%\" height=\"300\" src={vid.url} frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                                    <div className=\"card-body\">\r\n                                        <p> <span className=\"col-sm-6 px-0\" style={{textAlign:\"left\",fontSize:\"10\"}}>{vid.views} views</span> <span className=\"col-sm-3\" style={{textAlign:\"right\"}}> <i className=\"fas fa-thumbs-up\"></i> {vid.likes} </span> <span className=\"col-sm-3\" style={{textAlign:\"right\"}}> <i className=\"fas fa-thumbs-down\"></i> {vid.dislikes} </span></p>\r\n                                        <p className=\"card-text\">{vid.description}</p>\r\n                                    </div>                        \r\n                                </div>\r\n                            ))):('')\r\n                        }\r\n                    </div>     \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default YoutubeWidget;\r\n","import React from 'react';\n// import {Route,Switch} from 'react-router-dom';\n// import InstagramWidget from './components/instagramWidget/instaWidget';\nimport SpotifyWidget from './components/spotifyWidget/spotifyWidget';\nimport YoutubeWidget from './components/youtubeWidget/youtubeWidget';\n\nclass App extends React.Component {\t\n\t\n\trender(){\n\t\treturn (\n\n\t\t\t<div className=\"app\">\n\t\t\t\t<YoutubeWidget channelName=\"tseries\"/>\n\t\t\t\t<SpotifyWidget/>\n\t\t\t\t<footer style={{width:\"20%\",margin:\"auto\"}}>\n\t\t\t\t\t<h3 style={{fontSize:\"18px\"}}>Created by <a rel=\"noopener noreferrer\" style={{textDecoration:\"none\",color:\"#4f4f4f\"}} target=\"_blank\" href=\"https://github.com/swift1719\" >Ayush Pawar</a></h3>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t\t// <Switch>\n\t\t\t\t// {/* <Route \n\t\t\t\t// \texact path=\"/\" \n\t\t\t\t// \tcomponent={()=><InstagramWidget \n\t\t\t\t// \tusername=\"leomessi\" />}\n\t\t\t\t// />\n\t\t\t\t//  */}\n\t\t\t\t\n\t\t\t// {/* </Switch>\t\t\t\t\t\t */}\n\t\t);\n  \t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    \t<App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}